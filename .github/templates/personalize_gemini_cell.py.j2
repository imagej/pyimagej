#@title ðŸ¤– Personalize Gemini { display-mode: "form", run: "auto" }
#@markdown This cell tailors Gemini's persona based on your selected experience levels.
#@markdown
#@markdown This takes advantage of Gemini's "knowledge" of all cell outputs in the notebook: all we need to do is print the persona (or rule) text, and Gemini will automatically pick it up.
#@markdown
#@markdown Select your experience levels with the relevant tools, then run this cell to set Gemini's persona.
#@markdown
#@markdown ðŸ’¡ Tip: Changing selections automatically updates the AI (after manually running once)

# AUTO-GENERATED CONTENT BELOW - DO NOT EDIT MANUALLY
# This section is automatically updated based on files in doc/llms/personas/

# Experience level parameters (Colab forms)
{% for category, options in categories.items() %}
{{ category }}_experience = "{{ options[0] }}" #@param {{ options | tojson }}
{% endfor %}

beginner = "beginner"
intermediate = "intermediate"
advanced = "advanced"

# Convert display names to internal values
experience_mapping = {
{% for category, options in categories.items() %}
{% for option in options %}
	"{{ option }}": {{ experience_levels[option] }},
{% endfor %}
{% endfor %}
}

# Template file mapping for different experience categories
activity_dir = 'activities/'

{% for category, mapping in category_mappings.items() %}
{{ category }}_activities = {
{% for level, filename in mapping.items() %}
	{{ level }}: activity_dir + '{{ filename }}',
{% endfor %}
}

{% endfor %}

from pathlib import Path
def load_persona_file(filename):
	"""Load a persona template file with clear section markers"""
	try:
		# First check if we're in a cloned pyimagej repo
		persona_path = Path('/content/pyimagej/doc/llms/personas') / filename
		if not persona_path.exists():
			# Fall back to current directory structure
			persona_path = Path('./personas') / filename
			
		if persona_path.exists():
			content = persona_path.read_text(encoding='utf-8')
			# Add clear section markers for LLM parsing
			base_name = filename.replace('.md', '')
			# For activity files, remove experience level suffix and add "ACTIVITIES"
			if '_beginner' in base_name or '_intermediate' in base_name or '_advanced' in base_name:
				# Strip the last underscore and everything after it, then add "ACTIVITIES"
				activity_name = base_name.rsplit('_', 1)[0].replace('_', ' ').upper()
				section_name = f"{activity_name} ACTIVITIES"
			else:
				# Other files: use as-is
				section_name = base_name.replace('_', ' ').upper()
			return f"\n===== START OF {section_name} =====\n{content}\n===== END OF {section_name} =====\n"
		else:
			return f"# Template not found: {filename}\n(Using basic fallback)"
	except Exception as e:
		return f"# Error loading {filename}: {e}\n(Using basic fallback)"

# Load base persona with section markers
persona_text = "===== START OF PERSONA TEXT =====\n"
persona_text += load_persona_file('base_persona.md')
persona_text += "===== END OF PERSONA TEXT =====\n\n"

# Get experience levels
{% for category in categories.keys() %}
{{ category }}_level = experience_mapping[{{ category }}_experience]
{% endfor %}

# Add activities based on experience levels
{% for category in categories.keys() %}
if {{ category }}_level in {{ category }}_activities:
	persona_text += load_persona_file({{ category }}_activities[{{ category }}_level])

{% endfor %}

# Register the persona with the LLM
print(persona_text)
